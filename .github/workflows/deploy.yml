name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - 'dev/**'
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ethereum, solana, near, zeta, tia, sei, osmosis, mantra, injective, fetch, dydx, cronos, atom, kava, ada]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: bun add --global vercel@latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Set Vercel Project ID
        id: vercel-config
        run: |
          case "${{ matrix.app }}" in
            ethereum) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_ETHEREUM }}" >> $GITHUB_OUTPUT ;;
            solana) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_SOLANA }}" >> $GITHUB_OUTPUT ;;
            near) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_NEAR }}" >> $GITHUB_OUTPUT ;;
            zeta) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_ZETA }}" >> $GITHUB_OUTPUT ;;
            tia) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_TIA }}" >> $GITHUB_OUTPUT ;;
            sei) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_SEI }}" >> $GITHUB_OUTPUT ;;
            osmosis) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_OSMOSIS }}" >> $GITHUB_OUTPUT ;;
            mantra) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_MANTRA }}" >> $GITHUB_OUTPUT ;;
            injective) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_INJECTIVE }}" >> $GITHUB_OUTPUT ;;
            fetch) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_FETCH }}" >> $GITHUB_OUTPUT ;;
            dydx) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_DYDX }}" >> $GITHUB_OUTPUT ;;
            cronos) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_CRONOS }}" >> $GITHUB_OUTPUT ;;
            atom) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_ATOM }}" >> $GITHUB_OUTPUT ;;
            kava) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_KAVA }}" >> $GITHUB_OUTPUT ;;
            ada) echo "project_id=${{ secrets.VERCEL_PROJECT_ID_ADA }}" >> $GITHUB_OUTPUT ;;
          esac

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./apps/${{ matrix.app }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ steps.vercel-config.outputs.project_id }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./apps/${{ matrix.app }}
        timeout-minutes: 10
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ steps.vercel-config.outputs.project_id }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "ðŸš€ Deployed ${{ matrix.app }} to: $DEPLOYMENT_URL"
        working-directory: ./apps/${{ matrix.app }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ steps.vercel-config.outputs.project_id }}
