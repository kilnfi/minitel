name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - 'dev/**'
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.github/workflows/deploy.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [ethereum, solana, near, zeta, tia, sei, osmosis, mantra, injective, fetch, dydx, cronos, atom]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Vercel CLI
        run: bun add --global vercel@latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./apps/${{ matrix.app }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ matrix.app == 'ethereum' && secrets.VERCEL_PROJECT_ID_ETHEREUM || matrix.app == 'solana' && secrets.VERCEL_PROJECT_ID_SOLANA || matrix.app == 'near' && secrets.VERCEL_PROJECT_ID_NEAR || matrix.app == 'zeta' && secrets.VERCEL_PROJECT_ID_ZETA || matrix.app == 'tia' && secrets.VERCEL_PROJECT_ID_TIA || matrix.app == 'sei' && secrets.VERCEL_PROJECT_ID_SEI || matrix.app == 'osmosis' && secrets.VERCEL_PROJECT_ID_OSMOSIS || matrix.app == 'mantra' && secrets.VERCEL_PROJECT_ID_MANTRA || matrix.app == 'injective' && secrets.VERCEL_PROJECT_ID_INJECTIVE || matrix.app == 'fetch' && secrets.VERCEL_PROJECT_ID_FETCH || matrix.app == 'dydx' && secrets.VERCEL_PROJECT_ID_DYDX || matrix.app == 'cronos' && secrets.VERCEL_PROJECT_ID_CRONOS || secrets.VERCEL_PROJECT_ID_ATOM }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./apps/${{ matrix.app }}
        timeout-minutes: 10
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ matrix.app == 'ethereum' && secrets.VERCEL_PROJECT_ID_ETHEREUM || matrix.app == 'solana' && secrets.VERCEL_PROJECT_ID_SOLANA || matrix.app == 'near' && secrets.VERCEL_PROJECT_ID_NEAR || matrix.app == 'zeta' && secrets.VERCEL_PROJECT_ID_ZETA || matrix.app == 'tia' && secrets.VERCEL_PROJECT_ID_TIA || matrix.app == 'sei' && secrets.VERCEL_PROJECT_ID_SEI || matrix.app == 'osmosis' && secrets.VERCEL_PROJECT_ID_OSMOSIS || matrix.app == 'mantra' && secrets.VERCEL_PROJECT_ID_MANTRA || matrix.app == 'injective' && secrets.VERCEL_PROJECT_ID_INJECTIVE || matrix.app == 'fetch' && secrets.VERCEL_PROJECT_ID_FETCH || matrix.app == 'dydx' && secrets.VERCEL_PROJECT_ID_DYDX || matrix.app == 'cronos' && secrets.VERCEL_PROJECT_ID_CRONOS || secrets.VERCEL_PROJECT_ID_ATOM }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "ðŸš€ Deployed ${{ matrix.app }} to: $DEPLOYMENT_URL"
        working-directory: ./apps/${{ matrix.app }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ matrix.app == 'ethereum' && secrets.VERCEL_PROJECT_ID_ETHEREUM || matrix.app == 'solana' && secrets.VERCEL_PROJECT_ID_SOLANA || matrix.app == 'near' && secrets.VERCEL_PROJECT_ID_NEAR || matrix.app == 'zeta' && secrets.VERCEL_PROJECT_ID_ZETA || matrix.app == 'tia' && secrets.VERCEL_PROJECT_ID_TIA || matrix.app == 'sei' && secrets.VERCEL_PROJECT_ID_SEI || matrix.app == 'osmosis' && secrets.VERCEL_PROJECT_ID_OSMOSIS || matrix.app == 'mantra' && secrets.VERCEL_PROJECT_ID_MANTRA || matrix.app == 'injective' && secrets.VERCEL_PROJECT_ID_INJECTIVE || matrix.app == 'fetch' && secrets.VERCEL_PROJECT_ID_FETCH || matrix.app == 'dydx' && secrets.VERCEL_PROJECT_ID_DYDX || matrix.app == 'cronos' && secrets.VERCEL_PROJECT_ID_CRONOS || secrets.VERCEL_PROJECT_ID_ATOM }}
