import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["as", "render"],
  _excluded2 = ["as", "render"],
  _excluded3 = ["as", "render"],
  _excluded4 = ["as", "render"],
  _excluded5 = ["as", "render"],
  _excluded6 = ["as", "render"],
  _excluded7 = ["as", "render"],
  _excluded8 = ["as", "render"],
  _excluded9 = ["as", "render"],
  _excluded0 = ["as", "render"],
  _excluded1 = ["as", "render"],
  _excluded10 = ["as", "render"],
  _excluded11 = ["as", "render"];
import { Fragment, useEffect, useState } from 'react';
import { useStore } from "../store.js";
import { useTypesStore } from "../store/Types.js";
import { ValueQuote } from "../symbol/index.js";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export var bigIntToString = bi => {
  if (bi === undefined) {
    return '0n';
  } else if (typeof bi === 'string') {
    try {
      bi = BigInt(bi);
    } catch (e) {
      return '0n';
    }
  }
  return bi ? bi.toString() + 'n' : '0n';
};
export var SetComp = _ref => {
  var {
    value,
    keyName
  } = _ref;
  var {
    Set: Comp = {},
    displayDataTypes
  } = useTypesStore();
  var isSet = value instanceof Set;
  if (!isSet || !displayDataTypes) return null;
  var {
      as,
      render
    } = Comp,
    reset = _objectWithoutPropertiesLoose(Comp, _excluded);
  var isRender = render && typeof render === 'function';
  var type = isRender && render(reset, {
    type: 'type',
    value,
    keyName
  });
  if (type) return type;
  var Elm = as || 'span';
  return /*#__PURE__*/_jsx(Elm, _extends({}, reset));
};
SetComp.displayName = 'JVR.SetComp';
export var MapComp = _ref2 => {
  var {
    value,
    keyName
  } = _ref2;
  var {
    Map: Comp = {},
    displayDataTypes
  } = useTypesStore();
  var isMap = value instanceof Map;
  if (!isMap || !displayDataTypes) return null;
  var {
      as,
      render
    } = Comp,
    reset = _objectWithoutPropertiesLoose(Comp, _excluded2);
  var isRender = render && typeof render === 'function';
  var type = isRender && render(reset, {
    type: 'type',
    value,
    keyName
  });
  if (type) return type;
  var Elm = as || 'span';
  return /*#__PURE__*/_jsx(Elm, _extends({}, reset));
};
MapComp.displayName = 'JVR.MapComp';
var defalutStyle = {
  opacity: 0.75,
  paddingRight: 4
};
export var TypeString = _ref3 => {
  var {
    children = '',
    keyName,
    keys
  } = _ref3;
  var {
    Str = {},
    displayDataTypes
  } = useTypesStore();
  var {
    shortenTextAfterLength: length = 30,
    stringEllipsis = '...'
  } = useStore();
  var {
      as,
      render
    } = Str,
    reset = _objectWithoutPropertiesLoose(Str, _excluded3);
  var childrenStr = children;
  var [shorten, setShorten] = useState(length && childrenStr.length > length);
  useEffect(() => setShorten(length && childrenStr.length > length), [length]);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Str.style || {});
  if (length > 0) {
    reset.style = _extends({}, reset.style, {
      cursor: childrenStr.length <= length ? 'initial' : 'pointer'
    });
    if (childrenStr.length > length) {
      reset.onClick = () => {
        setShorten(!shorten);
      };
    }
  }
  var text = shorten ? "" + childrenStr.slice(0, length) + stringEllipsis : childrenStr;
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var cls = shorten ? 'w-rjv-value w-rjv-value-short' : 'w-rjv-value';
  var child = isRender && render(_extends({}, reset, {
    children: text,
    className: cls
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsxs(Fragment, {
      children: [/*#__PURE__*/_jsx(ValueQuote, {}), /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
        className: cls,
        children: text
      })), /*#__PURE__*/_jsx(ValueQuote, {})]
    })]
  });
};
TypeString.displayName = 'JVR.TypeString';
export var TypeTrue = _ref4 => {
  var {
    children,
    keyName,
    keys
  } = _ref4;
  var {
    True = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = True,
    reset = _objectWithoutPropertiesLoose(True, _excluded4);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, True.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      className: "w-rjv-value",
      children: children == null ? void 0 : children.toString()
    }))]
  });
};
TypeTrue.displayName = 'JVR.TypeTrue';
export var TypeFalse = _ref5 => {
  var {
    children,
    keyName,
    keys
  } = _ref5;
  var {
    False = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = False,
    reset = _objectWithoutPropertiesLoose(False, _excluded5);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, False.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      className: "w-rjv-value",
      children: children == null ? void 0 : children.toString()
    }))]
  });
};
TypeFalse.displayName = 'JVR.TypeFalse';
export var TypeFloat = _ref6 => {
  var {
    children,
    keyName,
    keys
  } = _ref6;
  var {
    Float = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = Float,
    reset = _objectWithoutPropertiesLoose(Float, _excluded6);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Float.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      className: "w-rjv-value",
      children: children == null ? void 0 : children.toString()
    }))]
  });
};
TypeFloat.displayName = 'JVR.TypeFloat';
export var TypeInt = _ref7 => {
  var {
    children,
    keyName,
    keys
  } = _ref7;
  var {
    Int = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = Int,
    reset = _objectWithoutPropertiesLoose(Int, _excluded7);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Int.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      className: "w-rjv-value",
      children: children == null ? void 0 : children.toString()
    }))]
  });
};
TypeInt.displayName = 'JVR.TypeInt';
export var TypeBigint = _ref8 => {
  var {
    children,
    keyName,
    keys
  } = _ref8;
  var {
    Bigint: CompBigint = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = CompBigint,
    reset = _objectWithoutPropertiesLoose(CompBigint, _excluded8);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, CompBigint.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      className: "w-rjv-value",
      children: bigIntToString(children == null ? void 0 : children.toString())
    }))]
  });
};
TypeBigint.displayName = 'JVR.TypeFloat';
export var TypeUrl = _ref9 => {
  var {
    children,
    keyName,
    keys
  } = _ref9;
  var {
    Url = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = Url,
    reset = _objectWithoutPropertiesLoose(Url, _excluded9);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Url.style);
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children: children == null ? void 0 : children.href,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsxs("a", _extends({
      href: children == null ? void 0 : children.href,
      target: "_blank"
    }, reset, {
      className: "w-rjv-value",
      children: [/*#__PURE__*/_jsx(ValueQuote, {}), children == null ? void 0 : children.href, /*#__PURE__*/_jsx(ValueQuote, {})]
    }))]
  });
};
TypeUrl.displayName = 'JVR.TypeUrl';
export var TypeDate = _ref0 => {
  var {
    children,
    keyName,
    keys
  } = _ref0;
  var {
    Date: CompData = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = CompData,
    reset = _objectWithoutPropertiesLoose(CompData, _excluded0);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, CompData.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var childStr = children instanceof Date ? children.toLocaleString() : children;
  var child = isRender && render(_extends({}, reset, {
    children: childStr,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      className: "w-rjv-value",
      children: childStr
    }))]
  });
};
TypeDate.displayName = 'JVR.TypeDate';
export var TypeUndefined = _ref1 => {
  var {
    children,
    keyName,
    keys
  } = _ref1;
  var {
    Undefined = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = Undefined,
    reset = _objectWithoutPropertiesLoose(Undefined, _excluded1);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Undefined.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child]
  });
};
TypeUndefined.displayName = 'JVR.TypeUndefined';
export var TypeNull = _ref10 => {
  var {
    children,
    keyName,
    keys
  } = _ref10;
  var {
    Null = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = Null,
    reset = _objectWithoutPropertiesLoose(Null, _excluded10);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Null.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child]
  });
};
TypeNull.displayName = 'JVR.TypeNull';
export var TypeNan = _ref11 => {
  var {
    children,
    keyName,
    keys
  } = _ref11;
  var {
    Nan = {},
    displayDataTypes
  } = useTypesStore();
  var {
      as,
      render
    } = Nan,
    reset = _objectWithoutPropertiesLoose(Nan, _excluded11);
  var Comp = as || 'span';
  var style = _extends({}, defalutStyle, Nan.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render(_extends({}, reset, {
    style
  }), {
    type: 'type',
    value: children,
    keyName,
    keys
  });
  var child = isRender && render(_extends({}, reset, {
    children: children == null ? void 0 : children.toString(),
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName,
    keys
  });
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/_jsx(Comp, _extends({}, reset, {
      style: style
    }))), child]
  });
};
TypeNan.displayName = 'JVR.TypeNan';