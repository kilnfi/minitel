import { type SymbolsElement, type SymbolsElementResult } from '../store/Symbols';
import { type TagType } from '../store/Types';
export declare const Quote: {
    <T extends object>(props: {
        isNumber?: boolean;
    } & React.HTMLAttributes<HTMLElement> & SymbolsElementResult<T>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
export declare const ValueQuote: {
    (props: React.HTMLAttributes<HTMLElement>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const Colon: {
    <T extends object>(props: SymbolsElementResult<T>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const Arrow: {
    <T extends TagType, K extends object>(props: SymbolsElement<T> & {
        expandKey: string;
    } & SymbolsElementResult<K>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export declare const BracketsOpen: {
    <K extends object>(props: {
        isBrackets?: boolean;
    } & SymbolsElementResult<K>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
type BracketsProps = {
    isBrackets?: boolean;
    isVisiable?: boolean;
};
export declare const BracketsClose: {
    <K extends object>(props: BracketsProps & SymbolsElementResult<K>): string | number | true | Iterable<import("react").ReactNode> | import("react/jsx-runtime").JSX.Element | null;
    displayName: string;
};
export {};
