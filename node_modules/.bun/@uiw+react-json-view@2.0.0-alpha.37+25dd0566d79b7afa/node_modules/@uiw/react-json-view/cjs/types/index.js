"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bigIntToString = exports.TypeUrl = exports.TypeUndefined = exports.TypeTrue = exports.TypeString = exports.TypeNull = exports.TypeNan = exports.TypeInt = exports.TypeFloat = exports.TypeFalse = exports.TypeDate = exports.TypeBigint = exports.SetComp = exports.MapComp = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _store = require("../store");
var _Types = require("../store/Types");
var _symbol = require("../symbol/");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["as", "render"],
  _excluded2 = ["as", "render"],
  _excluded3 = ["as", "render"],
  _excluded4 = ["as", "render"],
  _excluded5 = ["as", "render"],
  _excluded6 = ["as", "render"],
  _excluded7 = ["as", "render"],
  _excluded8 = ["as", "render"],
  _excluded9 = ["as", "render"],
  _excluded0 = ["as", "render"],
  _excluded1 = ["as", "render"],
  _excluded10 = ["as", "render"],
  _excluded11 = ["as", "render"];
var bigIntToString = exports.bigIntToString = function bigIntToString(bi) {
  if (bi === undefined) {
    return '0n';
  } else if (typeof bi === 'string') {
    try {
      bi = BigInt(bi);
    } catch (e) {
      return '0n';
    }
  }
  return bi ? bi.toString() + 'n' : '0n';
};
var SetComp = exports.SetComp = function SetComp(_ref) {
  var value = _ref.value,
    keyName = _ref.keyName;
  var _useTypesStore = (0, _Types.useTypesStore)(),
    _useTypesStore$Set = _useTypesStore.Set,
    Comp = _useTypesStore$Set === void 0 ? {} : _useTypesStore$Set,
    displayDataTypes = _useTypesStore.displayDataTypes;
  var isSet = value instanceof Set;
  if (!isSet || !displayDataTypes) return null;
  var as = Comp.as,
    render = Comp.render,
    reset = (0, _objectWithoutProperties2["default"])(Comp, _excluded);
  var isRender = render && typeof render === 'function';
  var type = isRender && render(reset, {
    type: 'type',
    value: value,
    keyName: keyName
  });
  if (type) return type;
  var Elm = as || 'span';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Elm, (0, _objectSpread2["default"])({}, reset));
};
SetComp.displayName = 'JVR.SetComp';
var MapComp = exports.MapComp = function MapComp(_ref2) {
  var value = _ref2.value,
    keyName = _ref2.keyName;
  var _useTypesStore2 = (0, _Types.useTypesStore)(),
    _useTypesStore2$Map = _useTypesStore2.Map,
    Comp = _useTypesStore2$Map === void 0 ? {} : _useTypesStore2$Map,
    displayDataTypes = _useTypesStore2.displayDataTypes;
  var isMap = value instanceof Map;
  if (!isMap || !displayDataTypes) return null;
  var as = Comp.as,
    render = Comp.render,
    reset = (0, _objectWithoutProperties2["default"])(Comp, _excluded2);
  var isRender = render && typeof render === 'function';
  var type = isRender && render(reset, {
    type: 'type',
    value: value,
    keyName: keyName
  });
  if (type) return type;
  var Elm = as || 'span';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Elm, (0, _objectSpread2["default"])({}, reset));
};
MapComp.displayName = 'JVR.MapComp';
var defalutStyle = {
  opacity: 0.75,
  paddingRight: 4
};
var TypeString = exports.TypeString = function TypeString(_ref3) {
  var _ref3$children = _ref3.children,
    children = _ref3$children === void 0 ? '' : _ref3$children,
    keyName = _ref3.keyName,
    keys = _ref3.keys;
  var _useTypesStore3 = (0, _Types.useTypesStore)(),
    _useTypesStore3$Str = _useTypesStore3.Str,
    Str = _useTypesStore3$Str === void 0 ? {} : _useTypesStore3$Str,
    displayDataTypes = _useTypesStore3.displayDataTypes;
  var _useStore = (0, _store.useStore)(),
    _useStore$shortenText = _useStore.shortenTextAfterLength,
    length = _useStore$shortenText === void 0 ? 30 : _useStore$shortenText,
    _useStore$stringEllip = _useStore.stringEllipsis,
    stringEllipsis = _useStore$stringEllip === void 0 ? '...' : _useStore$stringEllip;
  var as = Str.as,
    render = Str.render,
    reset = (0, _objectWithoutProperties2["default"])(Str, _excluded3);
  var childrenStr = children;
  var _useState = (0, _react.useState)(length && childrenStr.length > length),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    shorten = _useState2[0],
    setShorten = _useState2[1];
  (0, _react.useEffect)(function () {
    return setShorten(length && childrenStr.length > length);
  }, [length]);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Str.style || {});
  if (length > 0) {
    reset.style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset.style), {}, {
      cursor: childrenStr.length <= length ? 'initial' : 'pointer'
    });
    if (childrenStr.length > length) {
      reset.onClick = function () {
        setShorten(!shorten);
      };
    }
  }
  var text = shorten ? "".concat(childrenStr.slice(0, length)).concat(stringEllipsis) : childrenStr;
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var cls = shorten ? 'w-rjv-value w-rjv-value-short' : 'w-rjv-value';
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: text,
    className: cls
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_symbol.ValueQuote, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
        className: cls,
        children: text
      })), /*#__PURE__*/(0, _jsxRuntime.jsx)(_symbol.ValueQuote, {})]
    })]
  });
};
TypeString.displayName = 'JVR.TypeString';
var TypeTrue = exports.TypeTrue = function TypeTrue(_ref4) {
  var children = _ref4.children,
    keyName = _ref4.keyName,
    keys = _ref4.keys;
  var _useTypesStore4 = (0, _Types.useTypesStore)(),
    _useTypesStore4$True = _useTypesStore4.True,
    True = _useTypesStore4$True === void 0 ? {} : _useTypesStore4$True,
    displayDataTypes = _useTypesStore4.displayDataTypes;
  var as = True.as,
    render = True.render,
    reset = (0, _objectWithoutProperties2["default"])(True, _excluded4);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), True.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      className: "w-rjv-value",
      children: children === null || children === void 0 ? void 0 : children.toString()
    }))]
  });
};
TypeTrue.displayName = 'JVR.TypeTrue';
var TypeFalse = exports.TypeFalse = function TypeFalse(_ref5) {
  var children = _ref5.children,
    keyName = _ref5.keyName,
    keys = _ref5.keys;
  var _useTypesStore5 = (0, _Types.useTypesStore)(),
    _useTypesStore5$False = _useTypesStore5.False,
    False = _useTypesStore5$False === void 0 ? {} : _useTypesStore5$False,
    displayDataTypes = _useTypesStore5.displayDataTypes;
  var as = False.as,
    render = False.render,
    reset = (0, _objectWithoutProperties2["default"])(False, _excluded5);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), False.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      className: "w-rjv-value",
      children: children === null || children === void 0 ? void 0 : children.toString()
    }))]
  });
};
TypeFalse.displayName = 'JVR.TypeFalse';
var TypeFloat = exports.TypeFloat = function TypeFloat(_ref6) {
  var children = _ref6.children,
    keyName = _ref6.keyName,
    keys = _ref6.keys;
  var _useTypesStore6 = (0, _Types.useTypesStore)(),
    _useTypesStore6$Float = _useTypesStore6.Float,
    Float = _useTypesStore6$Float === void 0 ? {} : _useTypesStore6$Float,
    displayDataTypes = _useTypesStore6.displayDataTypes;
  var as = Float.as,
    render = Float.render,
    reset = (0, _objectWithoutProperties2["default"])(Float, _excluded6);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Float.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      className: "w-rjv-value",
      children: children === null || children === void 0 ? void 0 : children.toString()
    }))]
  });
};
TypeFloat.displayName = 'JVR.TypeFloat';
var TypeInt = exports.TypeInt = function TypeInt(_ref7) {
  var children = _ref7.children,
    keyName = _ref7.keyName,
    keys = _ref7.keys;
  var _useTypesStore7 = (0, _Types.useTypesStore)(),
    _useTypesStore7$Int = _useTypesStore7.Int,
    Int = _useTypesStore7$Int === void 0 ? {} : _useTypesStore7$Int,
    displayDataTypes = _useTypesStore7.displayDataTypes;
  var as = Int.as,
    render = Int.render,
    reset = (0, _objectWithoutProperties2["default"])(Int, _excluded7);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Int.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      className: "w-rjv-value",
      children: children === null || children === void 0 ? void 0 : children.toString()
    }))]
  });
};
TypeInt.displayName = 'JVR.TypeInt';
var TypeBigint = exports.TypeBigint = function TypeBigint(_ref8) {
  var children = _ref8.children,
    keyName = _ref8.keyName,
    keys = _ref8.keys;
  var _useTypesStore8 = (0, _Types.useTypesStore)(),
    _useTypesStore8$Bigin = _useTypesStore8.Bigint,
    CompBigint = _useTypesStore8$Bigin === void 0 ? {} : _useTypesStore8$Bigin,
    displayDataTypes = _useTypesStore8.displayDataTypes;
  var as = CompBigint.as,
    render = CompBigint.render,
    reset = (0, _objectWithoutProperties2["default"])(CompBigint, _excluded8);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), CompBigint.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      className: "w-rjv-value",
      children: bigIntToString(children === null || children === void 0 ? void 0 : children.toString())
    }))]
  });
};
TypeBigint.displayName = 'JVR.TypeFloat';
var TypeUrl = exports.TypeUrl = function TypeUrl(_ref9) {
  var children = _ref9.children,
    keyName = _ref9.keyName,
    keys = _ref9.keys;
  var _useTypesStore9 = (0, _Types.useTypesStore)(),
    _useTypesStore9$Url = _useTypesStore9.Url,
    Url = _useTypesStore9$Url === void 0 ? {} : _useTypesStore9$Url,
    displayDataTypes = _useTypesStore9.displayDataTypes;
  var as = Url.as,
    render = Url.render,
    reset = (0, _objectWithoutProperties2["default"])(Url, _excluded9);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Url.style);
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children === null || children === void 0 ? void 0 : children.href,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsxs)("a", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
      href: children === null || children === void 0 ? void 0 : children.href,
      target: "_blank"
    }, reset), {}, {
      className: "w-rjv-value",
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_symbol.ValueQuote, {}), children === null || children === void 0 ? void 0 : children.href, /*#__PURE__*/(0, _jsxRuntime.jsx)(_symbol.ValueQuote, {})]
    }))]
  });
};
TypeUrl.displayName = 'JVR.TypeUrl';
var TypeDate = exports.TypeDate = function TypeDate(_ref0) {
  var children = _ref0.children,
    keyName = _ref0.keyName,
    keys = _ref0.keys;
  var _useTypesStore0 = (0, _Types.useTypesStore)(),
    _useTypesStore0$Date = _useTypesStore0.Date,
    CompData = _useTypesStore0$Date === void 0 ? {} : _useTypesStore0$Date,
    displayDataTypes = _useTypesStore0.displayDataTypes;
  var as = CompData.as,
    render = CompData.render,
    reset = (0, _objectWithoutProperties2["default"])(CompData, _excluded0);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), CompData.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var childStr = children instanceof Date ? children.toLocaleString() : children;
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: childStr,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      className: "w-rjv-value",
      children: childStr
    }))]
  });
};
TypeDate.displayName = 'JVR.TypeDate';
var TypeUndefined = exports.TypeUndefined = function TypeUndefined(_ref1) {
  var children = _ref1.children,
    keyName = _ref1.keyName,
    keys = _ref1.keys;
  var _useTypesStore1 = (0, _Types.useTypesStore)(),
    _useTypesStore1$Undef = _useTypesStore1.Undefined,
    Undefined = _useTypesStore1$Undef === void 0 ? {} : _useTypesStore1$Undef,
    displayDataTypes = _useTypesStore1.displayDataTypes;
  var as = Undefined.as,
    render = Undefined.render,
    reset = (0, _objectWithoutProperties2["default"])(Undefined, _excluded1);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Undefined.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child]
  });
};
TypeUndefined.displayName = 'JVR.TypeUndefined';
var TypeNull = exports.TypeNull = function TypeNull(_ref10) {
  var children = _ref10.children,
    keyName = _ref10.keyName,
    keys = _ref10.keys;
  var _useTypesStore10 = (0, _Types.useTypesStore)(),
    _useTypesStore10$Null = _useTypesStore10.Null,
    Null = _useTypesStore10$Null === void 0 ? {} : _useTypesStore10$Null,
    displayDataTypes = _useTypesStore10.displayDataTypes;
  var as = Null.as,
    render = Null.render,
    reset = (0, _objectWithoutProperties2["default"])(Null, _excluded10);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Null.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children,
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child]
  });
};
TypeNull.displayName = 'JVR.TypeNull';
var TypeNan = exports.TypeNan = function TypeNan(_ref11) {
  var children = _ref11.children,
    keyName = _ref11.keyName,
    keys = _ref11.keys;
  var _useTypesStore11 = (0, _Types.useTypesStore)(),
    _useTypesStore11$Nan = _useTypesStore11.Nan,
    Nan = _useTypesStore11$Nan === void 0 ? {} : _useTypesStore11$Nan,
    displayDataTypes = _useTypesStore11.displayDataTypes;
  var as = Nan.as,
    render = Nan.render,
    reset = (0, _objectWithoutProperties2["default"])(Nan, _excluded11);
  var Comp = as || 'span';
  var style = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, defalutStyle), Nan.style || {});
  var isRender = render && typeof render === 'function';
  var type = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    style: style
  }), {
    type: 'type',
    value: children,
    keyName: keyName,
    keys: keys
  });
  var child = isRender && render((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    children: children === null || children === void 0 ? void 0 : children.toString(),
    className: 'w-rjv-value'
  }), {
    type: 'value',
    value: children,
    keyName: keyName,
    keys: keys
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && (type || /*#__PURE__*/(0, _jsxRuntime.jsx)(Comp, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      style: style
    }))), child]
  });
};
TypeNan.displayName = 'JVR.TypeNan';